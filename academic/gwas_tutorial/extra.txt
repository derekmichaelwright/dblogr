
### Marker Details

`gwaspr` has a funtions to output graphs and details about our marker data. 

Note: This functions can be slow to run on large marker sets.

```{r}
# Plot
gg_myG_Details(xx = myG, myPrefix = "myG_LDP_hmp")
```

![](Fig_02_myG_Details.png)

---

### Population Details

These plots give us some detail about our population based on the markers we have.

![](Fig_03_myY_Details.png)

---



```{r eval = F, class.source = "fold-hide"}
# For each marker
xGD <- read.csv("Data/myG_hmp.csv", header = T)
xGD$M1 <- substr(xGD$alleles, 1, 1)
xGD$M2 <- substr(xGD$alleles, 3, 3)
#
xY <- read.csv("Data/myY.csv") %>% 
  mutate(Name = plyr::mapvalues(Name, 
           c("3156-11_AGL",  "CDC Asterix AGL", "CDC_QG-1_AGL"), 
           c("X3156.11_AGL", "CDC_Asterix_AGL", "CDC_QG.1_AGL")))
#
xG_MAF <- function(x) { sum(x %in% x[1], na.rm = T)-1 }
xG_Het <- function(x) { sum(x %in% c("R","Y","S","W","K","M"), na.rm = T) }
xG_Homo <- function(x) { sum(x %in% c("A", "C", "G", "T"), na.rm = T) }
xG_N <- function(x) { sum(x %in% "N", na.rm = T) }
xGD <- xGD %>%
  mutate(numM1 = apply(xGD[,c("M1", as.character(xY$Name))], 1, xG_MAF),
         numM2 = apply(xGD[,c("M2", as.character(xY$Name))], 1, xG_MAF),
         numN     = apply(xGD[,as.character(xY$Name)], 1, xG_N),
         numHet   = apply(xGD[,as.character(xY$Name)], 1, xG_Het),
         numHomo  = apply(xGD[,as.character(xY$Name)], 1, xG_Homo),
         #
         Het = numHet / (numHet + numHomo),
         MAF = ifelse(numM1 > numM2, (numM2*2 + numHet) / (numM2*2 + numM1*2 + numHet*2),
                                     (numM1*2 + numHet) / (numM1*2 + numM2*2 + numHet*2) ),
         MCF = numN / (numHet + numHomo + numN))
xGD <- xGD %>% 
  select(rs, alleles, M1, M2, chrom, pos, 
         numM1, numM2, numHet, numN, numHomo, Het, MAF, MCF)
write.csv(xGD, "myG_Details.csv", row.names = F)
# Plot
mp1 <- ggplot(xGD, aes(x = Het * 100)) + 
  geom_histogram(color = "black", fill = "darkgreen", alpha = 0.7) +
  theme_gwaspr() +
  labs(title = "Marker Details (myG)", 
       subtitle = "Heterozygosity", x = NULL, y = NULL)
mp2 <- ggplot(xGD, aes(x = MAF * 100)) + 
  geom_histogram(color = "black", fill = "darkgreen", alpha = 0.7) +
  scale_x_continuous(breaks = seq(5,50, by = 5),
                     minor_breaks = seq(5,50, by = 5)) +
  theme_gwaspr() +
  labs(subtitle = "Minor Allele Frequency", x = "Percent", y = NULL)
mp3 <- ggplot(xGD, aes(x = MCF * 100)) + 
  geom_histogram(color = "black", fill = "darkgreen", alpha = 0.7) +
  theme_gwaspr() +
  labs(subtitle = "Missing Call Frequency", x = NULL, y = NULL)
mp <- ggarrange(mp1, mp2, mp3, ncol = 3, align = "h")
ggsave("Fig_02_myG_Details.png", mp, width = 12, height = 4)
```


```{r eval = F, class.source = "fold-hide"}
# For each genotype
xGD <- read.csv("Data/myG_hmp.csv", header = T)
xGD$M1 <- substr(xGD$alleles, 1, 1)
xGD$M2 <- substr(xGD$alleles, 3, 3)
#
xYD <- read.csv("Data/myY.csv") %>% 
  mutate(Het = NA, MAF = NA, MCF = NA,
         Name = plyr::mapvalues(Name, 
           c("3156-11_AGL",  "CDC Asterix AGL", "CDC_QG-1_AGL"), 
           c("X3156.11_AGL", "CDC_Asterix_AGL", "CDC_QG.1_AGL")) )
#i<-12
for(i in (12:ncol(xGD))) {
  xx <- xGD[,i]
  numHet <- sum(xx %in% c("R","Y","S","W","K","M"), na.rm = T)
  numHomo <- sum(xx %in% c("A", "C", "G", "T"), na.rm = T)
  numMiss <- sum(xx %in% "N", na.rm = T)
  numM1 <- sum(xx == xGD$M1, na.rm = T)
  numM2 <- sum(xx == xGD$M2, na.rm = T)
  #
  xYD$Het[xYD$Name == colnames(xGD)[i]] <- numHet / (numHet + numHomo)
  xYD$MAF[xYD$Name == colnames(xGD)[i]] <- ifelse(numM1 > numM2,
              (numM2*2 + numHet) / (numM2*2 + numM1*2 + numHet*2),
              (numM1*2 + numHet) / (numM1*2 + numM2*2 + numHet*2) )
  xYD$MCF[xYD$Name == colnames(xGD)[i]] <- numMiss / (numHet + numHomo + numMiss)
}
write.csv(xYD, "myY_Details.csv", row.names = F)
# Plot
mp1 <- ggplot(xYD, aes(x = Het * 100)) + 
  geom_histogram(color = "black", fill = "darkgreen", alpha = 0.7) +
  theme_gwaspr() +
  labs(title = "Genotype Details (myY)", 
       subtitle = "Heterozygosity", x = NULL, y = NULL)
mp2 <- ggplot(xYD, aes(x = MAF * 100)) + 
  geom_histogram(color = "black", fill = "darkgreen", alpha = 0.7) +
  theme_gwaspr() +
  labs(subtitle = "Minor Allele Frequency", x = "Percent", y = NULL)
mp3 <- ggplot(xYD, aes(x = MCF * 100)) + 
  geom_histogram(color = "black", fill = "darkgreen", alpha = 0.7) +
  theme_gwaspr() +
  labs(subtitle = "Missing Call Frequency", x = NULL, y = NULL)
mp <- ggarrange(mp1, mp2, mp3, ncol = 3, align = "h")
ggsave("Fig_03_myY_Details.png", mp, width = 12, height = 4)
```



##############################################################################

```{r eval = F, echo = F}
# BLUPs

Best linear unbiased prediction (BLUP)

> - **BLUP Tutorial**: [https://rpubs.com/amputz/BLUP](https://rpubs.com/amputz/BLUP){target="_blank"}> - **Tutorial**: [](){target="_blank"}


https://www.journalofdairyscience.org/article/S0022-0302(91)78602-5/pdf

The challenge for animal breeders was that we were always interested in predicting the ‘breeding value’ (random variable) for animals. This was in contrast to many fields where the only interest is in some fixed quantity such as a treatment effect.
```

```{r eval = F, echo = F}
# Prep data
xx <- read.csv("GWAS_Results/GAPIT.Association.Prediction_results.MLM.DTF_Sask_2017.csv") %>%
  rename(Name=Taxa) %>%
  left_join(myY, by = "Name")
# Plot
ggplot(xx, aes(x = Prediction, y = BLUP)) +
  geom_point() +
  theme_gwaspr() +
  labs(title = "")
ggplot(xx, aes(x = DTF_Sask_2017, y = Prediction)) +
  geom_abline() +
  geom_point() +
  theme_gwaspr() +
  labs(title = "")
ggplot(xx, aes(x = DTF_Sask_2017, y = BLUP)) +
  geom_abline() +
  geom_point() +
  theme_gwaspr() +
  labs(title = "")
#
xx <- read.csv("GWAS_Results/GAPIT.Association.Prediction_results.MLM.DTF_Nepal_2017.csv") %>%
  rename(Name=Taxa) %>%
  left_join(myY, by = "Name")
# Plot
ggplot(xx, aes(x = Prediction, y = BLUP)) +
  geom_point() +
  theme_gwaspr() +
  labs(title = "")
ggplot(xx, aes(x = DTF_Nepal_2017, y = Prediction)) +
  geom_abline() +
  geom_point() +
  theme_gwaspr() +
  labs(title = "")
ggplot(xx, aes(x = DTF_Nepal_2017, y = BLUP)) +
  geom_abline() +
  geom_point() +
  theme_gwaspr() +
  labs(title = "")
```


```{r eval = F, echo = F}
myCaption <- "derekmichaelwright.github.io/dblogr/ | Data: AGILE"
mp %>%
  annotate_figure(fig.lab.pos = "bottom.right", fig.lab.size = 6,
                  fig.lab = myCaption)
```


